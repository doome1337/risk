package ibur.risk.inet.proto;
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamedata.proto

public final class Gamedata {
  private Gamedata() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GameDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 mode = 1;
    /**
     * <code>optional int32 mode = 1;</code>
     */
    boolean hasMode();
    /**
     * <code>optional int32 mode = 1;</code>
     */
    int getMode();

    // optional int32 setupMode = 2;
    /**
     * <code>optional int32 setupMode = 2;</code>
     */
    boolean hasSetupMode();
    /**
     * <code>optional int32 setupMode = 2;</code>
     */
    int getSetupMode();

    // optional int32 gameMode = 3;
    /**
     * <code>optional int32 gameMode = 3;</code>
     */
    boolean hasGameMode();
    /**
     * <code>optional int32 gameMode = 3;</code>
     */
    int getGameMode();

    // repeated int32 playerTypes = 4;
    /**
     * <code>repeated int32 playerTypes = 4;</code>
     */
    java.util.List<java.lang.Integer> getPlayerTypesList();
    /**
     * <code>repeated int32 playerTypes = 4;</code>
     */
    int getPlayerTypesCount();
    /**
     * <code>repeated int32 playerTypes = 4;</code>
     */
    int getPlayerTypes(int index);

    // optional int32 numPlayers = 5;
    /**
     * <code>optional int32 numPlayers = 5;</code>
     */
    boolean hasNumPlayers();
    /**
     * <code>optional int32 numPlayers = 5;</code>
     */
    int getNumPlayers();

    // optional int32 numAI = 6;
    /**
     * <code>optional int32 numAI = 6;</code>
     */
    boolean hasNumAI();
    /**
     * <code>optional int32 numAI = 6;</code>
     */
    int getNumAI();

    // optional int32 turn = 7;
    /**
     * <code>optional int32 turn = 7;</code>
     */
    boolean hasTurn();
    /**
     * <code>optional int32 turn = 7;</code>
     */
    int getTurn();

    // repeated .Army armies = 8;
    /**
     * <code>repeated .Army armies = 8;</code>
     */
    java.util.List<Gamedata.Army> 
        getArmiesList();
    /**
     * <code>repeated .Army armies = 8;</code>
     */
    Gamedata.Army getArmies(int index);
    /**
     * <code>repeated .Army armies = 8;</code>
     */
    int getArmiesCount();
    /**
     * <code>repeated .Army armies = 8;</code>
     */
    java.util.List<? extends Gamedata.ArmyOrBuilder> 
        getArmiesOrBuilderList();
    /**
     * <code>repeated .Army armies = 8;</code>
     */
    Gamedata.ArmyOrBuilder getArmiesOrBuilder(
        int index);

    // optional int32 selectedCountry = 9;
    /**
     * <code>optional int32 selectedCountry = 9;</code>
     */
    boolean hasSelectedCountry();
    /**
     * <code>optional int32 selectedCountry = 9;</code>
     */
    int getSelectedCountry();

    // optional int32 attackTarget = 10;
    /**
     * <code>optional int32 attackTarget = 10;</code>
     */
    boolean hasAttackTarget();
    /**
     * <code>optional int32 attackTarget = 10;</code>
     */
    int getAttackTarget();

    // optional int32 attackers = 11;
    /**
     * <code>optional int32 attackers = 11;</code>
     */
    boolean hasAttackers();
    /**
     * <code>optional int32 attackers = 11;</code>
     */
    int getAttackers();

    // optional int32 defenders = 12;
    /**
     * <code>optional int32 defenders = 12;</code>
     */
    boolean hasDefenders();
    /**
     * <code>optional int32 defenders = 12;</code>
     */
    int getDefenders();

    // repeated int32 attackerDiceResults = 13;
    /**
     * <code>repeated int32 attackerDiceResults = 13;</code>
     */
    java.util.List<java.lang.Integer> getAttackerDiceResultsList();
    /**
     * <code>repeated int32 attackerDiceResults = 13;</code>
     */
    int getAttackerDiceResultsCount();
    /**
     * <code>repeated int32 attackerDiceResults = 13;</code>
     */
    int getAttackerDiceResults(int index);

    // repeated int32 defenderDiceResults = 14;
    /**
     * <code>repeated int32 defenderDiceResults = 14;</code>
     */
    java.util.List<java.lang.Integer> getDefenderDiceResultsList();
    /**
     * <code>repeated int32 defenderDiceResults = 14;</code>
     */
    int getDefenderDiceResultsCount();
    /**
     * <code>repeated int32 defenderDiceResults = 14;</code>
     */
    int getDefenderDiceResults(int index);

    // optional bool territoryConquered = 15;
    /**
     * <code>optional bool territoryConquered = 15;</code>
     */
    boolean hasTerritoryConquered();
    /**
     * <code>optional bool territoryConquered = 15;</code>
     */
    boolean getTerritoryConquered();

    // optional int32 cardBonus = 16;
    /**
     * <code>optional int32 cardBonus = 16;</code>
     */
    boolean hasCardBonus();
    /**
     * <code>optional int32 cardBonus = 16;</code>
     */
    int getCardBonus();
  }
  /**
   * Protobuf type {@code GameData}
   */
  public static final class GameData extends
      com.google.protobuf.GeneratedMessage
      implements GameDataOrBuilder {
    // Use GameData.newBuilder() to construct.
    private GameData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GameData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GameData defaultInstance;
    public static GameData getDefaultInstance() {
      return defaultInstance;
    }

    public GameData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GameData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              mode_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              setupMode_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameMode_ = input.readInt32();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                playerTypes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              playerTypes_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                playerTypes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                playerTypes_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              numPlayers_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              numAI_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              turn_ = input.readInt32();
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                armies_ = new java.util.ArrayList<Gamedata.Army>();
                mutable_bitField0_ |= 0x00000080;
              }
              armies_.add(input.readMessage(Gamedata.Army.PARSER, extensionRegistry));
              break;
            }
            case 72: {
              bitField0_ |= 0x00000040;
              selectedCountry_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000080;
              attackTarget_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000100;
              attackers_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000200;
              defenders_ = input.readInt32();
              break;
            }
            case 104: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                attackerDiceResults_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              attackerDiceResults_.add(input.readInt32());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                attackerDiceResults_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                attackerDiceResults_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                defenderDiceResults_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              defenderDiceResults_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                defenderDiceResults_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                defenderDiceResults_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 120: {
              bitField0_ |= 0x00000400;
              territoryConquered_ = input.readBool();
              break;
            }
            case 128: {
              bitField0_ |= 0x00000800;
              cardBonus_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          playerTypes_ = java.util.Collections.unmodifiableList(playerTypes_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          armies_ = java.util.Collections.unmodifiableList(armies_);
        }
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          attackerDiceResults_ = java.util.Collections.unmodifiableList(attackerDiceResults_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          defenderDiceResults_ = java.util.Collections.unmodifiableList(defenderDiceResults_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Gamedata.internal_static_GameData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Gamedata.internal_static_GameData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Gamedata.GameData.class, Gamedata.GameData.Builder.class);
    }

    public static com.google.protobuf.Parser<GameData> PARSER =
        new com.google.protobuf.AbstractParser<GameData>() {
      public GameData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GameData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GameData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 mode = 1;
    public static final int MODE_FIELD_NUMBER = 1;
    private int mode_;
    /**
     * <code>optional int32 mode = 1;</code>
     */
    public boolean hasMode() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 mode = 1;</code>
     */
    public int getMode() {
      return mode_;
    }

    // optional int32 setupMode = 2;
    public static final int SETUPMODE_FIELD_NUMBER = 2;
    private int setupMode_;
    /**
     * <code>optional int32 setupMode = 2;</code>
     */
    public boolean hasSetupMode() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 setupMode = 2;</code>
     */
    public int getSetupMode() {
      return setupMode_;
    }

    // optional int32 gameMode = 3;
    public static final int GAMEMODE_FIELD_NUMBER = 3;
    private int gameMode_;
    /**
     * <code>optional int32 gameMode = 3;</code>
     */
    public boolean hasGameMode() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 gameMode = 3;</code>
     */
    public int getGameMode() {
      return gameMode_;
    }

    // repeated int32 playerTypes = 4;
    public static final int PLAYERTYPES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> playerTypes_;
    /**
     * <code>repeated int32 playerTypes = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getPlayerTypesList() {
      return playerTypes_;
    }
    /**
     * <code>repeated int32 playerTypes = 4;</code>
     */
    public int getPlayerTypesCount() {
      return playerTypes_.size();
    }
    /**
     * <code>repeated int32 playerTypes = 4;</code>
     */
    public int getPlayerTypes(int index) {
      return playerTypes_.get(index);
    }

    // optional int32 numPlayers = 5;
    public static final int NUMPLAYERS_FIELD_NUMBER = 5;
    private int numPlayers_;
    /**
     * <code>optional int32 numPlayers = 5;</code>
     */
    public boolean hasNumPlayers() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 numPlayers = 5;</code>
     */
    public int getNumPlayers() {
      return numPlayers_;
    }

    // optional int32 numAI = 6;
    public static final int NUMAI_FIELD_NUMBER = 6;
    private int numAI_;
    /**
     * <code>optional int32 numAI = 6;</code>
     */
    public boolean hasNumAI() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 numAI = 6;</code>
     */
    public int getNumAI() {
      return numAI_;
    }

    // optional int32 turn = 7;
    public static final int TURN_FIELD_NUMBER = 7;
    private int turn_;
    /**
     * <code>optional int32 turn = 7;</code>
     */
    public boolean hasTurn() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 turn = 7;</code>
     */
    public int getTurn() {
      return turn_;
    }

    // repeated .Army armies = 8;
    public static final int ARMIES_FIELD_NUMBER = 8;
    private java.util.List<Gamedata.Army> armies_;
    /**
     * <code>repeated .Army armies = 8;</code>
     */
    public java.util.List<Gamedata.Army> getArmiesList() {
      return armies_;
    }
    /**
     * <code>repeated .Army armies = 8;</code>
     */
    public java.util.List<? extends Gamedata.ArmyOrBuilder> 
        getArmiesOrBuilderList() {
      return armies_;
    }
    /**
     * <code>repeated .Army armies = 8;</code>
     */
    public int getArmiesCount() {
      return armies_.size();
    }
    /**
     * <code>repeated .Army armies = 8;</code>
     */
    public Gamedata.Army getArmies(int index) {
      return armies_.get(index);
    }
    /**
     * <code>repeated .Army armies = 8;</code>
     */
    public Gamedata.ArmyOrBuilder getArmiesOrBuilder(
        int index) {
      return armies_.get(index);
    }

    // optional int32 selectedCountry = 9;
    public static final int SELECTEDCOUNTRY_FIELD_NUMBER = 9;
    private int selectedCountry_;
    /**
     * <code>optional int32 selectedCountry = 9;</code>
     */
    public boolean hasSelectedCountry() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 selectedCountry = 9;</code>
     */
    public int getSelectedCountry() {
      return selectedCountry_;
    }

    // optional int32 attackTarget = 10;
    public static final int ATTACKTARGET_FIELD_NUMBER = 10;
    private int attackTarget_;
    /**
     * <code>optional int32 attackTarget = 10;</code>
     */
    public boolean hasAttackTarget() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 attackTarget = 10;</code>
     */
    public int getAttackTarget() {
      return attackTarget_;
    }

    // optional int32 attackers = 11;
    public static final int ATTACKERS_FIELD_NUMBER = 11;
    private int attackers_;
    /**
     * <code>optional int32 attackers = 11;</code>
     */
    public boolean hasAttackers() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 attackers = 11;</code>
     */
    public int getAttackers() {
      return attackers_;
    }

    // optional int32 defenders = 12;
    public static final int DEFENDERS_FIELD_NUMBER = 12;
    private int defenders_;
    /**
     * <code>optional int32 defenders = 12;</code>
     */
    public boolean hasDefenders() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 defenders = 12;</code>
     */
    public int getDefenders() {
      return defenders_;
    }

    // repeated int32 attackerDiceResults = 13;
    public static final int ATTACKERDICERESULTS_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Integer> attackerDiceResults_;
    /**
     * <code>repeated int32 attackerDiceResults = 13;</code>
     */
    public java.util.List<java.lang.Integer>
        getAttackerDiceResultsList() {
      return attackerDiceResults_;
    }
    /**
     * <code>repeated int32 attackerDiceResults = 13;</code>
     */
    public int getAttackerDiceResultsCount() {
      return attackerDiceResults_.size();
    }
    /**
     * <code>repeated int32 attackerDiceResults = 13;</code>
     */
    public int getAttackerDiceResults(int index) {
      return attackerDiceResults_.get(index);
    }

    // repeated int32 defenderDiceResults = 14;
    public static final int DEFENDERDICERESULTS_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> defenderDiceResults_;
    /**
     * <code>repeated int32 defenderDiceResults = 14;</code>
     */
    public java.util.List<java.lang.Integer>
        getDefenderDiceResultsList() {
      return defenderDiceResults_;
    }
    /**
     * <code>repeated int32 defenderDiceResults = 14;</code>
     */
    public int getDefenderDiceResultsCount() {
      return defenderDiceResults_.size();
    }
    /**
     * <code>repeated int32 defenderDiceResults = 14;</code>
     */
    public int getDefenderDiceResults(int index) {
      return defenderDiceResults_.get(index);
    }

    // optional bool territoryConquered = 15;
    public static final int TERRITORYCONQUERED_FIELD_NUMBER = 15;
    private boolean territoryConquered_;
    /**
     * <code>optional bool territoryConquered = 15;</code>
     */
    public boolean hasTerritoryConquered() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool territoryConquered = 15;</code>
     */
    public boolean getTerritoryConquered() {
      return territoryConquered_;
    }

    // optional int32 cardBonus = 16;
    public static final int CARDBONUS_FIELD_NUMBER = 16;
    private int cardBonus_;
    /**
     * <code>optional int32 cardBonus = 16;</code>
     */
    public boolean hasCardBonus() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 cardBonus = 16;</code>
     */
    public int getCardBonus() {
      return cardBonus_;
    }

    private void initFields() {
      mode_ = 0;
      setupMode_ = 0;
      gameMode_ = 0;
      playerTypes_ = java.util.Collections.emptyList();
      numPlayers_ = 0;
      numAI_ = 0;
      turn_ = 0;
      armies_ = java.util.Collections.emptyList();
      selectedCountry_ = 0;
      attackTarget_ = 0;
      attackers_ = 0;
      defenders_ = 0;
      attackerDiceResults_ = java.util.Collections.emptyList();
      defenderDiceResults_ = java.util.Collections.emptyList();
      territoryConquered_ = false;
      cardBonus_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, mode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, setupMode_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameMode_);
      }
      for (int i = 0; i < playerTypes_.size(); i++) {
        output.writeInt32(4, playerTypes_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, numPlayers_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, numAI_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, turn_);
      }
      for (int i = 0; i < armies_.size(); i++) {
        output.writeMessage(8, armies_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(9, selectedCountry_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(10, attackTarget_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(11, attackers_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(12, defenders_);
      }
      for (int i = 0; i < attackerDiceResults_.size(); i++) {
        output.writeInt32(13, attackerDiceResults_.get(i));
      }
      for (int i = 0; i < defenderDiceResults_.size(); i++) {
        output.writeInt32(14, defenderDiceResults_.get(i));
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(15, territoryConquered_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(16, cardBonus_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, mode_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, setupMode_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameMode_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < playerTypes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(playerTypes_.get(i));
        }
        size += dataSize;
        size += 1 * getPlayerTypesList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, numPlayers_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, numAI_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, turn_);
      }
      for (int i = 0; i < armies_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, armies_.get(i));
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, selectedCountry_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, attackTarget_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, attackers_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, defenders_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < attackerDiceResults_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(attackerDiceResults_.get(i));
        }
        size += dataSize;
        size += 1 * getAttackerDiceResultsList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < defenderDiceResults_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(defenderDiceResults_.get(i));
        }
        size += dataSize;
        size += 1 * getDefenderDiceResultsList().size();
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, territoryConquered_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, cardBonus_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Gamedata.GameData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Gamedata.GameData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Gamedata.GameData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Gamedata.GameData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Gamedata.GameData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Gamedata.GameData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Gamedata.GameData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Gamedata.GameData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Gamedata.GameData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Gamedata.GameData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Gamedata.GameData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code GameData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements Gamedata.GameDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Gamedata.internal_static_GameData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Gamedata.internal_static_GameData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Gamedata.GameData.class, Gamedata.GameData.Builder.class);
      }

      // Construct using Gamedata.GameData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getArmiesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        mode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        setupMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        playerTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        numPlayers_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        numAI_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        turn_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        if (armiesBuilder_ == null) {
          armies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          armiesBuilder_.clear();
        }
        selectedCountry_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        attackTarget_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        attackers_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        defenders_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        attackerDiceResults_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        defenderDiceResults_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        territoryConquered_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        cardBonus_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Gamedata.internal_static_GameData_descriptor;
      }

      public Gamedata.GameData getDefaultInstanceForType() {
        return Gamedata.GameData.getDefaultInstance();
      }

      public Gamedata.GameData build() {
        Gamedata.GameData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Gamedata.GameData buildPartial() {
        Gamedata.GameData result = new Gamedata.GameData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mode_ = mode_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.setupMode_ = setupMode_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameMode_ = gameMode_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          playerTypes_ = java.util.Collections.unmodifiableList(playerTypes_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.playerTypes_ = playerTypes_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.numPlayers_ = numPlayers_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.numAI_ = numAI_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.turn_ = turn_;
        if (armiesBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            armies_ = java.util.Collections.unmodifiableList(armies_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.armies_ = armies_;
        } else {
          result.armies_ = armiesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000040;
        }
        result.selectedCountry_ = selectedCountry_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.attackTarget_ = attackTarget_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000100;
        }
        result.attackers_ = attackers_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000200;
        }
        result.defenders_ = defenders_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          attackerDiceResults_ = java.util.Collections.unmodifiableList(attackerDiceResults_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.attackerDiceResults_ = attackerDiceResults_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          defenderDiceResults_ = java.util.Collections.unmodifiableList(defenderDiceResults_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.defenderDiceResults_ = defenderDiceResults_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.territoryConquered_ = territoryConquered_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.cardBonus_ = cardBonus_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Gamedata.GameData) {
          return mergeFrom((Gamedata.GameData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Gamedata.GameData other) {
        if (other == Gamedata.GameData.getDefaultInstance()) return this;
        if (other.hasMode()) {
          setMode(other.getMode());
        }
        if (other.hasSetupMode()) {
          setSetupMode(other.getSetupMode());
        }
        if (other.hasGameMode()) {
          setGameMode(other.getGameMode());
        }
        if (!other.playerTypes_.isEmpty()) {
          if (playerTypes_.isEmpty()) {
            playerTypes_ = other.playerTypes_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensurePlayerTypesIsMutable();
            playerTypes_.addAll(other.playerTypes_);
          }
          onChanged();
        }
        if (other.hasNumPlayers()) {
          setNumPlayers(other.getNumPlayers());
        }
        if (other.hasNumAI()) {
          setNumAI(other.getNumAI());
        }
        if (other.hasTurn()) {
          setTurn(other.getTurn());
        }
        if (armiesBuilder_ == null) {
          if (!other.armies_.isEmpty()) {
            if (armies_.isEmpty()) {
              armies_ = other.armies_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureArmiesIsMutable();
              armies_.addAll(other.armies_);
            }
            onChanged();
          }
        } else {
          if (!other.armies_.isEmpty()) {
            if (armiesBuilder_.isEmpty()) {
              armiesBuilder_.dispose();
              armiesBuilder_ = null;
              armies_ = other.armies_;
              bitField0_ = (bitField0_ & ~0x00000080);
              armiesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArmiesFieldBuilder() : null;
            } else {
              armiesBuilder_.addAllMessages(other.armies_);
            }
          }
        }
        if (other.hasSelectedCountry()) {
          setSelectedCountry(other.getSelectedCountry());
        }
        if (other.hasAttackTarget()) {
          setAttackTarget(other.getAttackTarget());
        }
        if (other.hasAttackers()) {
          setAttackers(other.getAttackers());
        }
        if (other.hasDefenders()) {
          setDefenders(other.getDefenders());
        }
        if (!other.attackerDiceResults_.isEmpty()) {
          if (attackerDiceResults_.isEmpty()) {
            attackerDiceResults_ = other.attackerDiceResults_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureAttackerDiceResultsIsMutable();
            attackerDiceResults_.addAll(other.attackerDiceResults_);
          }
          onChanged();
        }
        if (!other.defenderDiceResults_.isEmpty()) {
          if (defenderDiceResults_.isEmpty()) {
            defenderDiceResults_ = other.defenderDiceResults_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureDefenderDiceResultsIsMutable();
            defenderDiceResults_.addAll(other.defenderDiceResults_);
          }
          onChanged();
        }
        if (other.hasTerritoryConquered()) {
          setTerritoryConquered(other.getTerritoryConquered());
        }
        if (other.hasCardBonus()) {
          setCardBonus(other.getCardBonus());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Gamedata.GameData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Gamedata.GameData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 mode = 1;
      private int mode_ ;
      /**
       * <code>optional int32 mode = 1;</code>
       */
      public boolean hasMode() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 mode = 1;</code>
       */
      public int getMode() {
        return mode_;
      }
      /**
       * <code>optional int32 mode = 1;</code>
       */
      public Builder setMode(int value) {
        bitField0_ |= 0x00000001;
        mode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 mode = 1;</code>
       */
      public Builder clearMode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mode_ = 0;
        onChanged();
        return this;
      }

      // optional int32 setupMode = 2;
      private int setupMode_ ;
      /**
       * <code>optional int32 setupMode = 2;</code>
       */
      public boolean hasSetupMode() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 setupMode = 2;</code>
       */
      public int getSetupMode() {
        return setupMode_;
      }
      /**
       * <code>optional int32 setupMode = 2;</code>
       */
      public Builder setSetupMode(int value) {
        bitField0_ |= 0x00000002;
        setupMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 setupMode = 2;</code>
       */
      public Builder clearSetupMode() {
        bitField0_ = (bitField0_ & ~0x00000002);
        setupMode_ = 0;
        onChanged();
        return this;
      }

      // optional int32 gameMode = 3;
      private int gameMode_ ;
      /**
       * <code>optional int32 gameMode = 3;</code>
       */
      public boolean hasGameMode() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 gameMode = 3;</code>
       */
      public int getGameMode() {
        return gameMode_;
      }
      /**
       * <code>optional int32 gameMode = 3;</code>
       */
      public Builder setGameMode(int value) {
        bitField0_ |= 0x00000004;
        gameMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gameMode = 3;</code>
       */
      public Builder clearGameMode() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameMode_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 playerTypes = 4;
      private java.util.List<java.lang.Integer> playerTypes_ = java.util.Collections.emptyList();
      private void ensurePlayerTypesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          playerTypes_ = new java.util.ArrayList<java.lang.Integer>(playerTypes_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 playerTypes = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getPlayerTypesList() {
        return java.util.Collections.unmodifiableList(playerTypes_);
      }
      /**
       * <code>repeated int32 playerTypes = 4;</code>
       */
      public int getPlayerTypesCount() {
        return playerTypes_.size();
      }
      /**
       * <code>repeated int32 playerTypes = 4;</code>
       */
      public int getPlayerTypes(int index) {
        return playerTypes_.get(index);
      }
      /**
       * <code>repeated int32 playerTypes = 4;</code>
       */
      public Builder setPlayerTypes(
          int index, int value) {
        ensurePlayerTypesIsMutable();
        playerTypes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 playerTypes = 4;</code>
       */
      public Builder addPlayerTypes(int value) {
        ensurePlayerTypesIsMutable();
        playerTypes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 playerTypes = 4;</code>
       */
      public Builder addAllPlayerTypes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePlayerTypesIsMutable();
        super.addAll(values, playerTypes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 playerTypes = 4;</code>
       */
      public Builder clearPlayerTypes() {
        playerTypes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // optional int32 numPlayers = 5;
      private int numPlayers_ ;
      /**
       * <code>optional int32 numPlayers = 5;</code>
       */
      public boolean hasNumPlayers() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 numPlayers = 5;</code>
       */
      public int getNumPlayers() {
        return numPlayers_;
      }
      /**
       * <code>optional int32 numPlayers = 5;</code>
       */
      public Builder setNumPlayers(int value) {
        bitField0_ |= 0x00000010;
        numPlayers_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 numPlayers = 5;</code>
       */
      public Builder clearNumPlayers() {
        bitField0_ = (bitField0_ & ~0x00000010);
        numPlayers_ = 0;
        onChanged();
        return this;
      }

      // optional int32 numAI = 6;
      private int numAI_ ;
      /**
       * <code>optional int32 numAI = 6;</code>
       */
      public boolean hasNumAI() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 numAI = 6;</code>
       */
      public int getNumAI() {
        return numAI_;
      }
      /**
       * <code>optional int32 numAI = 6;</code>
       */
      public Builder setNumAI(int value) {
        bitField0_ |= 0x00000020;
        numAI_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 numAI = 6;</code>
       */
      public Builder clearNumAI() {
        bitField0_ = (bitField0_ & ~0x00000020);
        numAI_ = 0;
        onChanged();
        return this;
      }

      // optional int32 turn = 7;
      private int turn_ ;
      /**
       * <code>optional int32 turn = 7;</code>
       */
      public boolean hasTurn() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 turn = 7;</code>
       */
      public int getTurn() {
        return turn_;
      }
      /**
       * <code>optional int32 turn = 7;</code>
       */
      public Builder setTurn(int value) {
        bitField0_ |= 0x00000040;
        turn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 turn = 7;</code>
       */
      public Builder clearTurn() {
        bitField0_ = (bitField0_ & ~0x00000040);
        turn_ = 0;
        onChanged();
        return this;
      }

      // repeated .Army armies = 8;
      private java.util.List<Gamedata.Army> armies_ =
        java.util.Collections.emptyList();
      private void ensureArmiesIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          armies_ = new java.util.ArrayList<Gamedata.Army>(armies_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          Gamedata.Army, Gamedata.Army.Builder, Gamedata.ArmyOrBuilder> armiesBuilder_;

      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public java.util.List<Gamedata.Army> getArmiesList() {
        if (armiesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(armies_);
        } else {
          return armiesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public int getArmiesCount() {
        if (armiesBuilder_ == null) {
          return armies_.size();
        } else {
          return armiesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Gamedata.Army getArmies(int index) {
        if (armiesBuilder_ == null) {
          return armies_.get(index);
        } else {
          return armiesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Builder setArmies(
          int index, Gamedata.Army value) {
        if (armiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArmiesIsMutable();
          armies_.set(index, value);
          onChanged();
        } else {
          armiesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Builder setArmies(
          int index, Gamedata.Army.Builder builderForValue) {
        if (armiesBuilder_ == null) {
          ensureArmiesIsMutable();
          armies_.set(index, builderForValue.build());
          onChanged();
        } else {
          armiesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Builder addArmies(Gamedata.Army value) {
        if (armiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArmiesIsMutable();
          armies_.add(value);
          onChanged();
        } else {
          armiesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Builder addArmies(
          int index, Gamedata.Army value) {
        if (armiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArmiesIsMutable();
          armies_.add(index, value);
          onChanged();
        } else {
          armiesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Builder addArmies(
          Gamedata.Army.Builder builderForValue) {
        if (armiesBuilder_ == null) {
          ensureArmiesIsMutable();
          armies_.add(builderForValue.build());
          onChanged();
        } else {
          armiesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Builder addArmies(
          int index, Gamedata.Army.Builder builderForValue) {
        if (armiesBuilder_ == null) {
          ensureArmiesIsMutable();
          armies_.add(index, builderForValue.build());
          onChanged();
        } else {
          armiesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Builder addAllArmies(
          java.lang.Iterable<? extends Gamedata.Army> values) {
        if (armiesBuilder_ == null) {
          ensureArmiesIsMutable();
          super.addAll(values, armies_);
          onChanged();
        } else {
          armiesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Builder clearArmies() {
        if (armiesBuilder_ == null) {
          armies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          armiesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Builder removeArmies(int index) {
        if (armiesBuilder_ == null) {
          ensureArmiesIsMutable();
          armies_.remove(index);
          onChanged();
        } else {
          armiesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Gamedata.Army.Builder getArmiesBuilder(
          int index) {
        return getArmiesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Gamedata.ArmyOrBuilder getArmiesOrBuilder(
          int index) {
        if (armiesBuilder_ == null) {
          return armies_.get(index);  } else {
          return armiesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public java.util.List<? extends Gamedata.ArmyOrBuilder> 
           getArmiesOrBuilderList() {
        if (armiesBuilder_ != null) {
          return armiesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(armies_);
        }
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Gamedata.Army.Builder addArmiesBuilder() {
        return getArmiesFieldBuilder().addBuilder(
            Gamedata.Army.getDefaultInstance());
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public Gamedata.Army.Builder addArmiesBuilder(
          int index) {
        return getArmiesFieldBuilder().addBuilder(
            index, Gamedata.Army.getDefaultInstance());
      }
      /**
       * <code>repeated .Army armies = 8;</code>
       */
      public java.util.List<Gamedata.Army.Builder> 
           getArmiesBuilderList() {
        return getArmiesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          Gamedata.Army, Gamedata.Army.Builder, Gamedata.ArmyOrBuilder> 
          getArmiesFieldBuilder() {
        if (armiesBuilder_ == null) {
          armiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              Gamedata.Army, Gamedata.Army.Builder, Gamedata.ArmyOrBuilder>(
                  armies_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          armies_ = null;
        }
        return armiesBuilder_;
      }

      // optional int32 selectedCountry = 9;
      private int selectedCountry_ ;
      /**
       * <code>optional int32 selectedCountry = 9;</code>
       */
      public boolean hasSelectedCountry() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 selectedCountry = 9;</code>
       */
      public int getSelectedCountry() {
        return selectedCountry_;
      }
      /**
       * <code>optional int32 selectedCountry = 9;</code>
       */
      public Builder setSelectedCountry(int value) {
        bitField0_ |= 0x00000100;
        selectedCountry_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 selectedCountry = 9;</code>
       */
      public Builder clearSelectedCountry() {
        bitField0_ = (bitField0_ & ~0x00000100);
        selectedCountry_ = 0;
        onChanged();
        return this;
      }

      // optional int32 attackTarget = 10;
      private int attackTarget_ ;
      /**
       * <code>optional int32 attackTarget = 10;</code>
       */
      public boolean hasAttackTarget() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 attackTarget = 10;</code>
       */
      public int getAttackTarget() {
        return attackTarget_;
      }
      /**
       * <code>optional int32 attackTarget = 10;</code>
       */
      public Builder setAttackTarget(int value) {
        bitField0_ |= 0x00000200;
        attackTarget_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 attackTarget = 10;</code>
       */
      public Builder clearAttackTarget() {
        bitField0_ = (bitField0_ & ~0x00000200);
        attackTarget_ = 0;
        onChanged();
        return this;
      }

      // optional int32 attackers = 11;
      private int attackers_ ;
      /**
       * <code>optional int32 attackers = 11;</code>
       */
      public boolean hasAttackers() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 attackers = 11;</code>
       */
      public int getAttackers() {
        return attackers_;
      }
      /**
       * <code>optional int32 attackers = 11;</code>
       */
      public Builder setAttackers(int value) {
        bitField0_ |= 0x00000400;
        attackers_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 attackers = 11;</code>
       */
      public Builder clearAttackers() {
        bitField0_ = (bitField0_ & ~0x00000400);
        attackers_ = 0;
        onChanged();
        return this;
      }

      // optional int32 defenders = 12;
      private int defenders_ ;
      /**
       * <code>optional int32 defenders = 12;</code>
       */
      public boolean hasDefenders() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 defenders = 12;</code>
       */
      public int getDefenders() {
        return defenders_;
      }
      /**
       * <code>optional int32 defenders = 12;</code>
       */
      public Builder setDefenders(int value) {
        bitField0_ |= 0x00000800;
        defenders_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 defenders = 12;</code>
       */
      public Builder clearDefenders() {
        bitField0_ = (bitField0_ & ~0x00000800);
        defenders_ = 0;
        onChanged();
        return this;
      }

      // repeated int32 attackerDiceResults = 13;
      private java.util.List<java.lang.Integer> attackerDiceResults_ = java.util.Collections.emptyList();
      private void ensureAttackerDiceResultsIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          attackerDiceResults_ = new java.util.ArrayList<java.lang.Integer>(attackerDiceResults_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated int32 attackerDiceResults = 13;</code>
       */
      public java.util.List<java.lang.Integer>
          getAttackerDiceResultsList() {
        return java.util.Collections.unmodifiableList(attackerDiceResults_);
      }
      /**
       * <code>repeated int32 attackerDiceResults = 13;</code>
       */
      public int getAttackerDiceResultsCount() {
        return attackerDiceResults_.size();
      }
      /**
       * <code>repeated int32 attackerDiceResults = 13;</code>
       */
      public int getAttackerDiceResults(int index) {
        return attackerDiceResults_.get(index);
      }
      /**
       * <code>repeated int32 attackerDiceResults = 13;</code>
       */
      public Builder setAttackerDiceResults(
          int index, int value) {
        ensureAttackerDiceResultsIsMutable();
        attackerDiceResults_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 attackerDiceResults = 13;</code>
       */
      public Builder addAttackerDiceResults(int value) {
        ensureAttackerDiceResultsIsMutable();
        attackerDiceResults_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 attackerDiceResults = 13;</code>
       */
      public Builder addAllAttackerDiceResults(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAttackerDiceResultsIsMutable();
        super.addAll(values, attackerDiceResults_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 attackerDiceResults = 13;</code>
       */
      public Builder clearAttackerDiceResults() {
        attackerDiceResults_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated int32 defenderDiceResults = 14;
      private java.util.List<java.lang.Integer> defenderDiceResults_ = java.util.Collections.emptyList();
      private void ensureDefenderDiceResultsIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          defenderDiceResults_ = new java.util.ArrayList<java.lang.Integer>(defenderDiceResults_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 defenderDiceResults = 14;</code>
       */
      public java.util.List<java.lang.Integer>
          getDefenderDiceResultsList() {
        return java.util.Collections.unmodifiableList(defenderDiceResults_);
      }
      /**
       * <code>repeated int32 defenderDiceResults = 14;</code>
       */
      public int getDefenderDiceResultsCount() {
        return defenderDiceResults_.size();
      }
      /**
       * <code>repeated int32 defenderDiceResults = 14;</code>
       */
      public int getDefenderDiceResults(int index) {
        return defenderDiceResults_.get(index);
      }
      /**
       * <code>repeated int32 defenderDiceResults = 14;</code>
       */
      public Builder setDefenderDiceResults(
          int index, int value) {
        ensureDefenderDiceResultsIsMutable();
        defenderDiceResults_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 defenderDiceResults = 14;</code>
       */
      public Builder addDefenderDiceResults(int value) {
        ensureDefenderDiceResultsIsMutable();
        defenderDiceResults_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 defenderDiceResults = 14;</code>
       */
      public Builder addAllDefenderDiceResults(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDefenderDiceResultsIsMutable();
        super.addAll(values, defenderDiceResults_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 defenderDiceResults = 14;</code>
       */
      public Builder clearDefenderDiceResults() {
        defenderDiceResults_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // optional bool territoryConquered = 15;
      private boolean territoryConquered_ ;
      /**
       * <code>optional bool territoryConquered = 15;</code>
       */
      public boolean hasTerritoryConquered() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional bool territoryConquered = 15;</code>
       */
      public boolean getTerritoryConquered() {
        return territoryConquered_;
      }
      /**
       * <code>optional bool territoryConquered = 15;</code>
       */
      public Builder setTerritoryConquered(boolean value) {
        bitField0_ |= 0x00004000;
        territoryConquered_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool territoryConquered = 15;</code>
       */
      public Builder clearTerritoryConquered() {
        bitField0_ = (bitField0_ & ~0x00004000);
        territoryConquered_ = false;
        onChanged();
        return this;
      }

      // optional int32 cardBonus = 16;
      private int cardBonus_ ;
      /**
       * <code>optional int32 cardBonus = 16;</code>
       */
      public boolean hasCardBonus() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 cardBonus = 16;</code>
       */
      public int getCardBonus() {
        return cardBonus_;
      }
      /**
       * <code>optional int32 cardBonus = 16;</code>
       */
      public Builder setCardBonus(int value) {
        bitField0_ |= 0x00008000;
        cardBonus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 cardBonus = 16;</code>
       */
      public Builder clearCardBonus() {
        bitField0_ = (bitField0_ & ~0x00008000);
        cardBonus_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:GameData)
    }

    static {
      defaultInstance = new GameData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:GameData)
  }

  public interface ArmyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 type = 1;
    /**
     * <code>optional int32 type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional int32 type = 1;</code>
     */
    int getType();

    // optional int32 freeunits = 2;
    /**
     * <code>optional int32 freeunits = 2;</code>
     */
    boolean hasFreeunits();
    /**
     * <code>optional int32 freeunits = 2;</code>
     */
    int getFreeunits();

    // repeated .Unit units = 3;
    /**
     * <code>repeated .Unit units = 3;</code>
     */
    java.util.List<Gamedata.Unit> 
        getUnitsList();
    /**
     * <code>repeated .Unit units = 3;</code>
     */
    Gamedata.Unit getUnits(int index);
    /**
     * <code>repeated .Unit units = 3;</code>
     */
    int getUnitsCount();
    /**
     * <code>repeated .Unit units = 3;</code>
     */
    java.util.List<? extends Gamedata.UnitOrBuilder> 
        getUnitsOrBuilderList();
    /**
     * <code>repeated .Unit units = 3;</code>
     */
    Gamedata.UnitOrBuilder getUnitsOrBuilder(
        int index);

    // repeated int32 cards = 4;
    /**
     * <code>repeated int32 cards = 4;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();
    /**
     * <code>repeated int32 cards = 4;</code>
     */
    int getCardsCount();
    /**
     * <code>repeated int32 cards = 4;</code>
     */
    int getCards(int index);
  }
  /**
   * Protobuf type {@code Army}
   */
  public static final class Army extends
      com.google.protobuf.GeneratedMessage
      implements ArmyOrBuilder {
    // Use Army.newBuilder() to construct.
    private Army(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Army(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Army defaultInstance;
    public static Army getDefaultInstance() {
      return defaultInstance;
    }

    public Army getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Army(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              type_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              freeunits_ = input.readInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                units_ = new java.util.ArrayList<Gamedata.Unit>();
                mutable_bitField0_ |= 0x00000004;
              }
              units_.add(input.readMessage(Gamedata.Unit.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              cards_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          units_ = java.util.Collections.unmodifiableList(units_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Gamedata.internal_static_Army_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Gamedata.internal_static_Army_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Gamedata.Army.class, Gamedata.Army.Builder.class);
    }

    public static com.google.protobuf.Parser<Army> PARSER =
        new com.google.protobuf.AbstractParser<Army>() {
      public Army parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Army(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Army> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>optional int32 type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 type = 1;</code>
     */
    public int getType() {
      return type_;
    }

    // optional int32 freeunits = 2;
    public static final int FREEUNITS_FIELD_NUMBER = 2;
    private int freeunits_;
    /**
     * <code>optional int32 freeunits = 2;</code>
     */
    public boolean hasFreeunits() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 freeunits = 2;</code>
     */
    public int getFreeunits() {
      return freeunits_;
    }

    // repeated .Unit units = 3;
    public static final int UNITS_FIELD_NUMBER = 3;
    private java.util.List<Gamedata.Unit> units_;
    /**
     * <code>repeated .Unit units = 3;</code>
     */
    public java.util.List<Gamedata.Unit> getUnitsList() {
      return units_;
    }
    /**
     * <code>repeated .Unit units = 3;</code>
     */
    public java.util.List<? extends Gamedata.UnitOrBuilder> 
        getUnitsOrBuilderList() {
      return units_;
    }
    /**
     * <code>repeated .Unit units = 3;</code>
     */
    public int getUnitsCount() {
      return units_.size();
    }
    /**
     * <code>repeated .Unit units = 3;</code>
     */
    public Gamedata.Unit getUnits(int index) {
      return units_.get(index);
    }
    /**
     * <code>repeated .Unit units = 3;</code>
     */
    public Gamedata.UnitOrBuilder getUnitsOrBuilder(
        int index) {
      return units_.get(index);
    }

    // repeated int32 cards = 4;
    public static final int CARDS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> cards_;
    /**
     * <code>repeated int32 cards = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getCardsList() {
      return cards_;
    }
    /**
     * <code>repeated int32 cards = 4;</code>
     */
    public int getCardsCount() {
      return cards_.size();
    }
    /**
     * <code>repeated int32 cards = 4;</code>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }

    private void initFields() {
      type_ = 0;
      freeunits_ = 0;
      units_ = java.util.Collections.emptyList();
      cards_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, freeunits_);
      }
      for (int i = 0; i < units_.size(); i++) {
        output.writeMessage(3, units_.get(i));
      }
      for (int i = 0; i < cards_.size(); i++) {
        output.writeInt32(4, cards_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, freeunits_);
      }
      for (int i = 0; i < units_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, units_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cards_.get(i));
        }
        size += dataSize;
        size += 1 * getCardsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Gamedata.Army parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Gamedata.Army parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Gamedata.Army parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Gamedata.Army parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Gamedata.Army parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Gamedata.Army parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Gamedata.Army parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Gamedata.Army parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Gamedata.Army parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Gamedata.Army parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Gamedata.Army prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Army}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements Gamedata.ArmyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Gamedata.internal_static_Army_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Gamedata.internal_static_Army_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Gamedata.Army.class, Gamedata.Army.Builder.class);
      }

      // Construct using Gamedata.Army.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getUnitsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        freeunits_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (unitsBuilder_ == null) {
          units_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          unitsBuilder_.clear();
        }
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Gamedata.internal_static_Army_descriptor;
      }

      public Gamedata.Army getDefaultInstanceForType() {
        return Gamedata.Army.getDefaultInstance();
      }

      public Gamedata.Army build() {
        Gamedata.Army result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Gamedata.Army buildPartial() {
        Gamedata.Army result = new Gamedata.Army(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.freeunits_ = freeunits_;
        if (unitsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            units_ = java.util.Collections.unmodifiableList(units_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.units_ = units_;
        } else {
          result.units_ = unitsBuilder_.build();
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.cards_ = cards_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Gamedata.Army) {
          return mergeFrom((Gamedata.Army)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Gamedata.Army other) {
        if (other == Gamedata.Army.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasFreeunits()) {
          setFreeunits(other.getFreeunits());
        }
        if (unitsBuilder_ == null) {
          if (!other.units_.isEmpty()) {
            if (units_.isEmpty()) {
              units_ = other.units_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureUnitsIsMutable();
              units_.addAll(other.units_);
            }
            onChanged();
          }
        } else {
          if (!other.units_.isEmpty()) {
            if (unitsBuilder_.isEmpty()) {
              unitsBuilder_.dispose();
              unitsBuilder_ = null;
              units_ = other.units_;
              bitField0_ = (bitField0_ & ~0x00000004);
              unitsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getUnitsFieldBuilder() : null;
            } else {
              unitsBuilder_.addAllMessages(other.units_);
            }
          }
        }
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Gamedata.Army parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Gamedata.Army) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 type = 1;
      private int type_ ;
      /**
       * <code>optional int32 type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 type = 1;</code>
       */
      public int getType() {
        return type_;
      }
      /**
       * <code>optional int32 type = 1;</code>
       */
      public Builder setType(int value) {
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      // optional int32 freeunits = 2;
      private int freeunits_ ;
      /**
       * <code>optional int32 freeunits = 2;</code>
       */
      public boolean hasFreeunits() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 freeunits = 2;</code>
       */
      public int getFreeunits() {
        return freeunits_;
      }
      /**
       * <code>optional int32 freeunits = 2;</code>
       */
      public Builder setFreeunits(int value) {
        bitField0_ |= 0x00000002;
        freeunits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 freeunits = 2;</code>
       */
      public Builder clearFreeunits() {
        bitField0_ = (bitField0_ & ~0x00000002);
        freeunits_ = 0;
        onChanged();
        return this;
      }

      // repeated .Unit units = 3;
      private java.util.List<Gamedata.Unit> units_ =
        java.util.Collections.emptyList();
      private void ensureUnitsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          units_ = new java.util.ArrayList<Gamedata.Unit>(units_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          Gamedata.Unit, Gamedata.Unit.Builder, Gamedata.UnitOrBuilder> unitsBuilder_;

      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public java.util.List<Gamedata.Unit> getUnitsList() {
        if (unitsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(units_);
        } else {
          return unitsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public int getUnitsCount() {
        if (unitsBuilder_ == null) {
          return units_.size();
        } else {
          return unitsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Gamedata.Unit getUnits(int index) {
        if (unitsBuilder_ == null) {
          return units_.get(index);
        } else {
          return unitsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Builder setUnits(
          int index, Gamedata.Unit value) {
        if (unitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnitsIsMutable();
          units_.set(index, value);
          onChanged();
        } else {
          unitsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Builder setUnits(
          int index, Gamedata.Unit.Builder builderForValue) {
        if (unitsBuilder_ == null) {
          ensureUnitsIsMutable();
          units_.set(index, builderForValue.build());
          onChanged();
        } else {
          unitsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Builder addUnits(Gamedata.Unit value) {
        if (unitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnitsIsMutable();
          units_.add(value);
          onChanged();
        } else {
          unitsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Builder addUnits(
          int index, Gamedata.Unit value) {
        if (unitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnitsIsMutable();
          units_.add(index, value);
          onChanged();
        } else {
          unitsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Builder addUnits(
          Gamedata.Unit.Builder builderForValue) {
        if (unitsBuilder_ == null) {
          ensureUnitsIsMutable();
          units_.add(builderForValue.build());
          onChanged();
        } else {
          unitsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Builder addUnits(
          int index, Gamedata.Unit.Builder builderForValue) {
        if (unitsBuilder_ == null) {
          ensureUnitsIsMutable();
          units_.add(index, builderForValue.build());
          onChanged();
        } else {
          unitsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Builder addAllUnits(
          java.lang.Iterable<? extends Gamedata.Unit> values) {
        if (unitsBuilder_ == null) {
          ensureUnitsIsMutable();
          super.addAll(values, units_);
          onChanged();
        } else {
          unitsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Builder clearUnits() {
        if (unitsBuilder_ == null) {
          units_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          unitsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Builder removeUnits(int index) {
        if (unitsBuilder_ == null) {
          ensureUnitsIsMutable();
          units_.remove(index);
          onChanged();
        } else {
          unitsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Gamedata.Unit.Builder getUnitsBuilder(
          int index) {
        return getUnitsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Gamedata.UnitOrBuilder getUnitsOrBuilder(
          int index) {
        if (unitsBuilder_ == null) {
          return units_.get(index);  } else {
          return unitsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public java.util.List<? extends Gamedata.UnitOrBuilder> 
           getUnitsOrBuilderList() {
        if (unitsBuilder_ != null) {
          return unitsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(units_);
        }
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Gamedata.Unit.Builder addUnitsBuilder() {
        return getUnitsFieldBuilder().addBuilder(
            Gamedata.Unit.getDefaultInstance());
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public Gamedata.Unit.Builder addUnitsBuilder(
          int index) {
        return getUnitsFieldBuilder().addBuilder(
            index, Gamedata.Unit.getDefaultInstance());
      }
      /**
       * <code>repeated .Unit units = 3;</code>
       */
      public java.util.List<Gamedata.Unit.Builder> 
           getUnitsBuilderList() {
        return getUnitsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          Gamedata.Unit, Gamedata.Unit.Builder, Gamedata.UnitOrBuilder> 
          getUnitsFieldBuilder() {
        if (unitsBuilder_ == null) {
          unitsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              Gamedata.Unit, Gamedata.Unit.Builder, Gamedata.UnitOrBuilder>(
                  units_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          units_ = null;
        }
        return unitsBuilder_;
      }

      // repeated int32 cards = 4;
      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 cards = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }
      /**
       * <code>repeated int32 cards = 4;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }
      /**
       * <code>repeated int32 cards = 4;</code>
       */
      public int getCards(int index) {
        return cards_.get(index);
      }
      /**
       * <code>repeated int32 cards = 4;</code>
       */
      public Builder setCards(
          int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards = 4;</code>
       */
      public Builder addCards(int value) {
        ensureCardsIsMutable();
        cards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards = 4;</code>
       */
      public Builder addAllCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsIsMutable();
        super.addAll(values, cards_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 cards = 4;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Army)
    }

    static {
      defaultInstance = new Army(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Army)
  }

  public interface UnitOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int32 loc = 1;
    /**
     * <code>optional int32 loc = 1;</code>
     */
    boolean hasLoc();
    /**
     * <code>optional int32 loc = 1;</code>
     */
    int getLoc();

    // optional int32 troops = 2;
    /**
     * <code>optional int32 troops = 2;</code>
     */
    boolean hasTroops();
    /**
     * <code>optional int32 troops = 2;</code>
     */
    int getTroops();
  }
  /**
   * Protobuf type {@code Unit}
   */
  public static final class Unit extends
      com.google.protobuf.GeneratedMessage
      implements UnitOrBuilder {
    // Use Unit.newBuilder() to construct.
    private Unit(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Unit(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Unit defaultInstance;
    public static Unit getDefaultInstance() {
      return defaultInstance;
    }

    public Unit getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Unit(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              loc_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              troops_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Gamedata.internal_static_Unit_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Gamedata.internal_static_Unit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Gamedata.Unit.class, Gamedata.Unit.Builder.class);
    }

    public static com.google.protobuf.Parser<Unit> PARSER =
        new com.google.protobuf.AbstractParser<Unit>() {
      public Unit parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Unit(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Unit> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int32 loc = 1;
    public static final int LOC_FIELD_NUMBER = 1;
    private int loc_;
    /**
     * <code>optional int32 loc = 1;</code>
     */
    public boolean hasLoc() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 loc = 1;</code>
     */
    public int getLoc() {
      return loc_;
    }

    // optional int32 troops = 2;
    public static final int TROOPS_FIELD_NUMBER = 2;
    private int troops_;
    /**
     * <code>optional int32 troops = 2;</code>
     */
    public boolean hasTroops() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 troops = 2;</code>
     */
    public int getTroops() {
      return troops_;
    }

    private void initFields() {
      loc_ = 0;
      troops_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, loc_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, troops_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, loc_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, troops_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static Gamedata.Unit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Gamedata.Unit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Gamedata.Unit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Gamedata.Unit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Gamedata.Unit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Gamedata.Unit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static Gamedata.Unit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static Gamedata.Unit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static Gamedata.Unit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static Gamedata.Unit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(Gamedata.Unit prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Unit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements Gamedata.UnitOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return Gamedata.internal_static_Unit_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Gamedata.internal_static_Unit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Gamedata.Unit.class, Gamedata.Unit.Builder.class);
      }

      // Construct using Gamedata.Unit.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        loc_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        troops_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return Gamedata.internal_static_Unit_descriptor;
      }

      public Gamedata.Unit getDefaultInstanceForType() {
        return Gamedata.Unit.getDefaultInstance();
      }

      public Gamedata.Unit build() {
        Gamedata.Unit result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Gamedata.Unit buildPartial() {
        Gamedata.Unit result = new Gamedata.Unit(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.loc_ = loc_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.troops_ = troops_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Gamedata.Unit) {
          return mergeFrom((Gamedata.Unit)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Gamedata.Unit other) {
        if (other == Gamedata.Unit.getDefaultInstance()) return this;
        if (other.hasLoc()) {
          setLoc(other.getLoc());
        }
        if (other.hasTroops()) {
          setTroops(other.getTroops());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Gamedata.Unit parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Gamedata.Unit) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int32 loc = 1;
      private int loc_ ;
      /**
       * <code>optional int32 loc = 1;</code>
       */
      public boolean hasLoc() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 loc = 1;</code>
       */
      public int getLoc() {
        return loc_;
      }
      /**
       * <code>optional int32 loc = 1;</code>
       */
      public Builder setLoc(int value) {
        bitField0_ |= 0x00000001;
        loc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 loc = 1;</code>
       */
      public Builder clearLoc() {
        bitField0_ = (bitField0_ & ~0x00000001);
        loc_ = 0;
        onChanged();
        return this;
      }

      // optional int32 troops = 2;
      private int troops_ ;
      /**
       * <code>optional int32 troops = 2;</code>
       */
      public boolean hasTroops() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 troops = 2;</code>
       */
      public int getTroops() {
        return troops_;
      }
      /**
       * <code>optional int32 troops = 2;</code>
       */
      public Builder setTroops(int value) {
        bitField0_ |= 0x00000002;
        troops_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 troops = 2;</code>
       */
      public Builder clearTroops() {
        bitField0_ = (bitField0_ & ~0x00000002);
        troops_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Unit)
    }

    static {
      defaultInstance = new Unit(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Unit)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_GameData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_GameData_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Army_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Army_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Unit_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Unit_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016gamedata.proto\"\330\002\n\010GameData\022\014\n\004mode\030\001 " +
      "\001(\005\022\021\n\tsetupMode\030\002 \001(\005\022\020\n\010gameMode\030\003 \001(\005" +
      "\022\023\n\013playerTypes\030\004 \003(\005\022\022\n\nnumPlayers\030\005 \001(" +
      "\005\022\r\n\005numAI\030\006 \001(\005\022\014\n\004turn\030\007 \001(\005\022\025\n\006armies" +
      "\030\010 \003(\0132\005.Army\022\027\n\017selectedCountry\030\t \001(\005\022\024" +
      "\n\014attackTarget\030\n \001(\005\022\021\n\tattackers\030\013 \001(\005\022" +
      "\021\n\tdefenders\030\014 \001(\005\022\033\n\023attackerDiceResult" +
      "s\030\r \003(\005\022\033\n\023defenderDiceResults\030\016 \003(\005\022\032\n\022" +
      "territoryConquered\030\017 \001(\010\022\021\n\tcardBonus\030\020 " +
      "\001(\005\"L\n\004Army\022\014\n\004type\030\001 \001(\005\022\021\n\tfreeunits\030\002",
      " \001(\005\022\024\n\005units\030\003 \003(\0132\005.Unit\022\r\n\005cards\030\004 \003(" +
      "\005\"#\n\004Unit\022\013\n\003loc\030\001 \001(\005\022\016\n\006troops\030\002 \001(\005"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_GameData_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_GameData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_GameData_descriptor,
              new java.lang.String[] { "Mode", "SetupMode", "GameMode", "PlayerTypes", "NumPlayers", "NumAI", "Turn", "Armies", "SelectedCountry", "AttackTarget", "Attackers", "Defenders", "AttackerDiceResults", "DefenderDiceResults", "TerritoryConquered", "CardBonus", });
          internal_static_Army_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_Army_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Army_descriptor,
              new java.lang.String[] { "Type", "Freeunits", "Units", "Cards", });
          internal_static_Unit_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_Unit_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Unit_descriptor,
              new java.lang.String[] { "Loc", "Troops", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
